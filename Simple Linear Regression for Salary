# Simple Linear Regression

# Importing the libraries
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# Importing the dataset
dataset = pd.read_csv('Salary_Data.csv')
X = dataset.iloc[:, :-1].values
y = dataset.iloc[:, -1].values

# Splitting the dataset into the Training set and Test set
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 1/3, random_state = 0)

# Training the Simple Linear Regression model on the Training set
from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(X_train, y_train)

# Predicting the Test set results
y_pred = regressor.predict(X_test)

# Visualising the Training set results
plt.scatter(X_train, y_train, color = 'red')
plt.plot(X_train, regressor.predict(X_train), color = 'blue')
plt.title('Salary vs Experience (Training set)')
plt.xlabel('Years of Experience')
plt.ylabel('Salary')
plt.show()


import matplotlib.pyplot as plt

# Plotting the training set
plt.scatter(X_train, y_train, color='red', label='Training set')
plt.plot(X_train, regressor.predict(X_train), color='blue')

# Plotting the test set predictions
plt.scatter(X_test, y_test, color='green', label='Test set')
plt.plot(X_test, y_pred, color='orange')

plt.title('Salary vs Experience')
plt.xlabel('Years of Experience')
plt.ylabel('Salary')
plt.legend()
plt.show()


# Test set visualization results
import matplotlib.pyplot as plt

# Plotting the test set
plt.scatter(X_test, y_test, color='red', label='Test set')
plt.plot(X_test, y_pred, color='blue')

plt.title('Salary vs Experience (Test set)')
plt.xlabel('Years of Experience')
plt.ylabel('Salary')
plt.legend()
plt.show()

# Prediction plot
c = [i for i in range(1, len(y_test) + 1, 1)]
plt.plot(c, y_test, color='r', linestyle='-', label='Actual Salary')
plt.plot(c, y_pred, color='g', linestyle='-', label='Predicted Salary')
plt.xlabel('Years of Experience')
plt.ylabel('Salary')
plt.title('Prediction')
plt.legend()  # Add legend with labels
plt.show()


# R Square, Means Suqre erro, and Plot
from sklearn.metrics import mean_squared_error, r2_score

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Initialize and fit the linear regression model
lr = LinearRegression()
lr.fit(X_train, y_train)

# Make predictions on the test set
y_pred = lr.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

# Print model performance metrics
print(f'Mean Squared Error: {mse:.2f}')
print(f'R-squared: {r2:.2f}')

# Plot the actual vs predicted values
plt.scatter(X_test, y_test, color='red', label='Actual')
plt.plot(X_test, y_pred, color='blue', linewidth=2, label='Predicted')
plt.xlabel('Years of Experience')
plt.ylabel('Salary')
plt.title('Actual vs Predicted Salary')
plt.legend()
plt.show()

# Calculate the absolute error
absolute_error = np.abs(y_test - y_pred)

# Calculate the mean absolute error (MAE)
mae = np.mean(absolute_error)

# Calculate the squared error
squared_error = (y_test - y_pred)**2

# Calculate the mean squared error (MSE)
mse = np.mean(squared_error)

# Calculate the root mean squared error (RMSE)
rmse = np.sqrt(mse)

# Print the error metrics
print(f'Mean Absolute Error (MAE): {mae}')
print(f'Mean Squared Error (MSE): {mse}')
print(f'Root Mean Squared Error (RMSE): {rmse}')

# Plot the absolute error
plt.plot(c, absolute_error, color='g', linestyle='-', label='Absolute Error')
plt.xlabel('Index')
plt.ylabel('Absolute Error')
plt.title('Absolute Error Plot')
plt.legend()
plt.show()

# Just plot actual and predicted values for more insights
plt.figure(figsize=(12,6))
plt.scatter(y_test,y_pred,color='r',linestyle='-')
plt.show()

# Intercept and coefficient of the line
print('Intercept of the model:',regressor.intercept_)
print('Coefficient of the line:',regressor.coef_)

# Predict 20 years of experience
Assuming X_new is a feature vector with 20 years of experience 
X_new = [[20]]

# Predict the salary for 20 years of experience
predicted_salary_20_years = regressor.predict(X_new)

# Print the predicted salary
print(f"Predicted Salary for 20 years of experience: {predicted_salary_20_years[0]}")

import matplotlib.pyplot as plt
# Assuming X_test contains your test data
c = [i for i in range(1, len(y_test) + 1, 1)]

# Plot the actual data
plt.plot(c, y_test, color='r', linestyle='-', label='Actual')

# Plot the predicted data for the test set
plt.plot(c, y_pred, color='g', linestyle='-', label='Predicted')

     


# Plot the prediction for 20 years of experience
X_new = [[20]]
predicted_salary_20_years = regressor.predict(X_new)
plt.scatter(len(y_test) + 1, predicted_salary_20_years, color='b', label='Predicted for 20 years')

# Set labels and title
plt.xlabel('Years of Experience')
plt.ylabel('Salary')
plt.title('Prediction')

# Show legend
plt.legend()

# Show the plot
plt.show()

residuals = y_test - y_pred

plt.scatter(X_test, residuals, color='green')
plt.axhline(y=0, color='red', linestyle='--', linewidth=2)
plt.xlabel('Years of Experience')
plt.ylabel('Residuals')
plt.title('Residual Plot')
plt.show()

